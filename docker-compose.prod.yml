version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: assethub-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: "postgresql://assethub:${POSTGRES_PASSWORD}@postgres:5432/assethub_production"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379"
      NEXTAUTH_SECRET: "${NEXTAUTH_SECRET}"
      OIDC_CLIENT_SECRET: "${OIDC_CLIENT_SECRET}"
      DHL_API_KEY: "${DHL_API_KEY}"
      DHL_API_SECRET: "${DHL_API_SECRET}"
      SLACK_WEBHOOK_URL: "${SLACK_WEBHOOK_URL}"
      ENCRYPTION_KEY: "${ENCRYPTION_KEY}"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - assethub-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  postgres:
    image: postgres:15.4-alpine
    container_name: assethub-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: assethub_production
      POSTGRES_USER: assethub
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - assethub-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U assethub -d assethub_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7.2-alpine
    container_name: assethub-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    volumes:
      - redis_prod_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - assethub-prod
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  nginx:
    image: nginx:1.25-alpine
    container_name: assethub-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - assethub-prod
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backup:
    image: postgres:15.4-alpine
    container_name: assethub-backup
    restart: "no"
    environment:
      PGPASSWORD: "${POSTGRES_PASSWORD}"
      BACKUP_RETENTION_DAYS: 30
      S3_BUCKET: "${BACKUP_S3_BUCKET}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"
    networks:
      - assethub-prod
    depends_on:
      - postgres
    profiles:
      - backup

  monitoring:
    image: prom/prometheus:latest
    container_name: assethub-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - assethub-prod
    profiles:
      - monitoring

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local

networks:
  assethub-prod:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: assethub-prod